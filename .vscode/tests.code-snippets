{
	// Place your py65emu workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    /*
    "assertEqual": {
        "scope": "python",
        "prefix": "assertequal",
        "body": [
            "self.assertEqual($1, $2)"
        ],
        "description": "a == b",
    },
    "assertNotEqual": {
        "scope": "python",
        "prefix": "assertnotequal",
        "body": [
            "self.assertNotEqual($1, $2)"
        ],
        "description": "a != b",
    },
    "assertTrue": {
        "scope": "python",
        "prefix": "asserttrue",
        "body": [
            "self.assertTrue($1)"
        ],
        "description": "bool(x) is True",
    },
    "assertFalse": {
        "scope": "python",
        "prefix": "assertfalse",
        "body": [
            "self.assertFalse($1)"
        ],
        "description": "bool(x) is False",
    },
    "assertIs": {
        "scope": "python",
        "prefix": "assertis",
        "body": [
            "self.assertIs($1, $2)"
        ],
        "description": "a is b",
    },
    "assertIsNot": {
        "scope": "python",
        "prefix": "assertisnot",
        "body": [
            "self.assertIsNot($1, $2)"
        ],
        "description": "a is not b",
    },
    "assertIsNone": {
        "scope": "python",
        "prefix": "assertisnone",
        "body": [
            "self.assertIsNone($1)"
        ],
        "description": "x is None",
    },
    "assertIsNotNone": {
        "scope": "python",
        "prefix": "assertisnotnone",
        "body": [
            "self.assertIsNotNone($1)"
        ],
        "description": "x is not None",
    },
    "assertIn": {
        "scope": "python",
        "prefix": "assertin",
        "body": [
            "self.assertIn($1, $2)"
        ],
        "description": "a in b",
    },
    "assertNotIn": {
        "scope": "python",
        "prefix": "assertnotin",
        "body": [
            "self.assertNotIn($1, $2)"
        ],
        "description": "a not in b",
    },
    "assertIsInstance": {
        "scope": "python",
        "prefix": "assertisinstance",
        "body": [
            "self.assertIsInstance($1, $2)"
        ],
        "description": "isinstance(a, b)",
    },
    "assertNotIsInstance": {
        "scope": "python",
        "prefix": "assertnotisinstance",
        "body": [
            "self.assertNotIsInstance($1, $2)"
        ],
        "description": "not isinstance(a, b)",
    },
    */
	"Test": {
		"scope": "python",
		"prefix": "test",
		"body": [
			"def test${1:_}(self):",
			"    subtests = [",
			"        $0",
			"    ]",
			"    for data in subtests:",
			"        with self.subTest(data=data):",
			"            c = self.create(program=p)",
			"",
			"            c.step()",
			"            c.step()",
			"",
		],
		"description": "Test Stub"
	},
	"SubTest": {
		"scope": "python",
		"prefix": "subtest",
		"body": [
			"subtests = [",
			"    $0",
			"]",
			"for data in subtests:",
			"    with self.subTest(data=data):",
			"        p = [$1]",
			"        c = self.create(program=p)",
			"",
			"        c.step()",
			"        c.step()",
			"",
			"        self.assertEqual(${2|c.r.pc,c.r.a,c.r.x,c.r.y,c.r.s,c.mmu.read(),c.r.getFlag(FlagBit.U)|}, data[${3|0,1,2,3,4|}])",
			"",
		],
		"description": "SubTest Stub"
	},
	"TestAssertion": {
		"scope": "python",
		"prefix": "assert",
		"body": [
			"self.assertEqual(${1|c.r.pc,c.r.a,c.r.x,c.r.y,c.r.s,c.mmu.read(),c.r.getFlag(FlagBit.U)|}, data[${2|0,1,2,3,4|}])",
			"$0",
		],
		"description": "SubTest Stub"
	},
	"SubTestCreate": {
		"scope": "python",
		"prefix": "create",
		"body": [
			"def create(self, *args, **kwargs) -> CPU:",
			"    if program is None:",
			"        program = [$0]",
			"",
			"    c = super().create(*args, **kwargs)",
			"",
			"    if condition:",
			"        c.step()",
			"",
			"    return c",
			"",
		],
		"description": "SubTestCreate Stub"
	},
	"List": {
		"scope": "python",
		"prefix": "_list",
		"body": [
			"${1:list} = [${TM_SELECTED_TEXT/\\(([\w\s,]+)\)/\[$1\]/}]",
		],
		"description": "List shorthand"
	},
	"Tuple": {
        "scope": "python",
		"prefix": "_tuple",
		"body": [
            "${1:tuple} = [${TM_SELECTED_TEXT/\\[([\w\s,]+)\]/\($1\)/}]",
		],
		"description": "Tuple shorthand"
	},
}
