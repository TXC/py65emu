#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# complexity documentation build configuration file, created by
# sphinx-quickstart on Tue Jul  9 22:26:36 2013.
#
# This file is execfile()d with the current directory set to its containing dir
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os
import tomli

os.environ['SPHINX_AUTODOC_RELOAD_MODULES'] = '1'

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
# sys.path.insert(0, os.path.abspath('.'))

# Get the project root dir, which is the parent dir of this
cwd = os.getcwd()
project_root = os.path.dirname(cwd)

# Insert the project root dir as the first element in the PYTHONPATH.
# This lets us ensure that the source package is imported, and that its
# version is used.

sys.path.insert(0, project_root)

# region General configuration

# If your documentation needs a minimal Sphinx version, state it here.
needs_sphinx = "4.0"

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
# extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.doctest', 'sphinx.ext.todo',
              'sphinx.ext.autosummary', 'sphinx.ext.extlinks',
              'sphinx.ext.intersphinx',
              'sphinx.ext.viewcode', 'sphinx.ext.inheritance_diagram',
              'sphinx.ext.coverage']

coverage_statistics_to_report = coverage_statistics_to_stdout = True

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix of source filenames.
# source_suffix = '.rst'
source_suffix = {".rst": "restructuredtext"}

# The encoding of source files.
# source_encoding = 'utf-8-sig'

# The master toctree document.
root_doc = "index"

with open('../pyproject.toml', 'rb') as f:
    try:
        pyproject = tomli.load(f)
    except tomli.TOMLDecodeError:
        print('Invalid "pyproject.toml file.')
        exit

# General information about the project.
project = pyproject['project']['name']
author = ", ".join(a['name'] for a in pyproject['project']['authors'])
copyright = "2023, " + author
description = pyproject['project']['description'] + " Documentation"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = pyproject['project']['version']
# The full version, including alpha/beta/rc tags.
release = pyproject['project']['version']

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
# language = None
language = "en"

# Directories in which to search for additional message catalogs, relative to
# the source directory. The directories on this path are searched by the
# standard gettext module.
# Internal messages are fetched from a text domain of sphinx; so if you add the
# directory `locales` to this setting, the message catalogs (compiled from .po
# format using msgfmt) must be in `./locale/{language}/LC_MESSAGES/sphinx.mo`.
# The text domain of individual documents depends on gettext_compact.
# locale_dirs = ['locales']

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
# today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = [
    "_build",
    "Thumbs.db",
    ".DS_Store"
]

# The reST default role (used for this markup: `text`) to use for all documents
# default_role = None
default_role = "py:obj"

# If true, '()' will be appended to :func: etc. cross-reference text.
# add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
# show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# A list of ignored prefixes for module index sorting.
# modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
# keep_warnings = False

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

# endregion General configuration

# region Options for

# Set this option to True if you want all displayed math to be numbered.
# The default is False.
# math_number_all = False

# A string used for formatting the labels of references to equations.
# The {number} place-holder stands for the equation number.
# math_eqref_format = None

# If True, displayed math equations are numbered across pages when numfig is
# enabled. The numfig_secnum_depth setting is respected. The eq, not numref,
# role must be used to reference equation numbers. Default is True.
# math_numfig = True

# endregion Options for Math

# region Autodoc extension configuration

# This value selects what content will be inserted into the main body of an
# autoclass directive. The possible values are: 'class', 'both', 'init'
# autoclass_content = 'class'

# This value selects how the signature will be displayed for the class defined
# by autoclass directive. The possible values are: mixed, separated
# autodoc_class_signature = 'mixed'

# This value selects if automatically documented members are sorted
# alphabetical (value 'alphabetical'), by member type (value 'groupwise') or
# by source order (value 'bysource'). The default is alphabetical.
autodoc_member_order = "bysource"

# This value is a list of autodoc directive flags that should be automatically
# applied to all autodoc directives.
# The supported flags are:
# 'members', 'undoc-members', 'private-members', 'special-members',
# 'inherited-members', 'show-inheritance', ignore-module-all' and
# 'exclude-members'.
# autodoc_default_flags = ['show-inheritance']

autodoc_default_options = {
    "members": True,
    "member-order": autodoc_member_order,
    "undoc-members": True,
    "private-members": False,
    "special-members": "__init__",
    "inherited-members": True,
    "show-inheritance": True,
    "ignore-module-all": True,
    "exclude-members": "__weakref__",
}

# Functions imported from C modules cannot be introspected, and therefore the
# signature for such functions cannot be automatically determined. However,
# it is an often-used convention to put the signature into the first line of
# the function’s docstring.
# If this boolean value is set to True (which is the default), autodoc will
# look at the first line of the docstring for functions and methods, and if it
# looks like a signature, use the line as the signature and remove it from the
# docstring content.
# autodoc_docstring_signature = True

# This value contains a list of modules to be mocked up. This is useful when
# some external dependencies are not met at build time and break the building
# process. You may only specify the root package of the dependencies themselves
# and omit the sub-modules.
# autodoc_mock_imports = []

# This value controls how to represent typehints. The setting takes the
# following values:
# 'signature', 'description', 'none', both'
# autodoc_typehints = 'signature'

# This value controls whether the types of undocumented parameters and return
# values are documented when autodoc_typehints is set to description.
# autodoc_typehints_description_target = 'all'

# A dictionary for users defined type aliases that maps a type name to the
# full-qualified object name. It is used to keep type aliases not evaluated in
# the document. Defaults to empty ({}).
# autodoc_type_aliases = {}

# This value controls the format of typehints. The setting takes the
# following values: 'fully-qualified', 'short'
# autodoc_typehints_format = 'short'

# If True, the default argument values of functions will be not evaluated on
# generating document. It preserves them as is in the source code.
# autodoc_preserve_defaults = False
autodoc_preserve_defaults = True

# This value controls the behavior of `sphinx-build -W`` during importing
# modules. If False is given, autodoc forcedly suppresses the error if the
# imported module emits warnings. By default, True.
# autodoc_warningiserror = True

# This value controls the docstrings inheritance. If set to True the docstring
# for classes or methods, if not explicitly set, is inherited from parents.
# autodoc_inherit_docstrings = False

# autodoc supports to suppress warning messages via suppress_warnings.
# It allows following warnings types in addition:
# 'autodoc', 'autodoc.import_object'
# suppress_warnings = ''

# endregion Autodoc extension configuration

# region Autosummary extension configuration

# A dictionary of values to pass into the template engine’s context for
# autosummary stubs files.
# autosummary_context = {}
autosummary_context = {

}

# Boolean indicating whether to scan all found documents for autosummary
# directives, and to generate stub pages for each. It is enabled by default.
# autosummary_generate = True

# If true, autosummary overwrites existing files by generated stub pages.
# Defaults to true (enabled).
# autosummary_generate_overwrite = True

# This value contains a list of modules to be mocked up.
# See autodoc_mock_imports for more details.
# It defaults to autodoc_mock_imports.
# autosummary_mock_imports = []

# A boolean flag indicating whether to document classes and functions
# imported in modules. Default is False
# autosummary_imported_members = False

# If False and a module has the __all__ attribute set, autosummary documents
# every member listed in __all__ and no others. Default is True
# autosummary_ignore_module_all = True

# A dict mapping object names to filenames. This is necessary to avoid
# filename conflicts where multiple objects have names that are
# indistinguishable when case is ignored, on file systems where filenames are
# case-insensitive.
# autosummary_filename_map = {}

# endregion Autosummary extension configuration

# region Options for HTML output

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#

# https://docs.readthedocs.io/en/stable/faq.html#i-want-to-use-the-read-the-docs-theme-locally
# on_rtd is whether we are on readthedocs.org
on_rtd = os.environ.get("READTHEDOCS", None) == "True"
if not on_rtd:  # only import and set the theme if we're building docs locally
    import sphinx_rtd_theme

    html_theme = "sphinx_rtd_theme"
    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]
# otherwise, readthedocs uses their theme by default, so no need to specify it

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']

# endregion Options for HTML output

# region Options for HTMLHelp output

# Output file base name for HTML help builder.
htmlhelp_basename = "py65emu-doc"

# endregion Options for HTMLHelp output

# region Options for LaTeX output

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual])
latex_documents = [
    ("index", project + ".tex", description, author, "manual"),
]

# endregion Options for LaTeX output

# region Options for manual page output

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [("index", project, description, [author], 1)]

# If true, show URL addresses after external links.
# man_show_urls = False

# endregion Options for manual page output

# region Options for Texinfo output

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        "index",
        project,
        description,
        author,
        project,
        "One line description of project.",
        "Miscellaneous",
    ),
]
# endregion Options for Texinfo output

# region Options for ePub output

epub_theme = 'epub'
epub_basename = project
epub_author = author
epub_publisher = pyproject['project']['urls']['Homepage']
epub_uid = 'web-site'
epub_scheme = 'url'
epub_identifier = epub_publisher
"""
epub_pre_files = [('index.xhtml', 'Welcome')]
"""
"""
epub_post_files = [('usage/installation.xhtml', 'Installing ' + project),
                   ('develop.xhtml', project + ' development')]
"""
"""
epub_exclude_files = ['_static/opensearch.xml', 'search.html', '*.js']
"""
epub_fix_images = False
epub_max_image_width = 0
epub_show_urls = 'inline'
epub_use_index = False
epub_description = project + ' documentation generator system manual'

# endregion Options for ePub output
